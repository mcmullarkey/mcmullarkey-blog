[
  {
    "objectID": "posts/nba_2020_2021_mirage_metrics/index.html",
    "href": "posts/nba_2020_2021_mirage_metrics/index.html",
    "title": "NBA Mirage Metrics:Looking for the Unsustainable",
    "section": "",
    "text": "How good is your favorite NBA team really? This is a surprisingly difficult question to answer!  I can already hear some people yelling “Scoreboard!” and pointing at readily available wins and losses for each team.   And even the most die-hard fans will admit their team sometimes gets lucky.1 A banked 3-pointer, an untimely injury to the opposing team’s star, and so much more can make the wins and losses less reliable than they first appear.   Folks have looked at a bunch of metrics to better quantify team quality outside of luck. Average point differential per 100 possessions, the 4 factors, and many more can give us a clearer guide to how good teams are. But what if we wanted to specifically quantify how lucky they’ve been?   A precise quantification of that isn’t going to happen, at least not at scale.2 But there are certain, easily measured metrics that seem to be more luck than skill-based.   Drawing on Seth Partnow’s The Midrange Theory and a myriad of Caitlin Cooper film deep-dives we’ll assume:  - Defenses don’t affect how well opponents shoot from 3 + Long 23  - Offenses built on high-volume, very high accuracy long 2s are less sustainable than other kinds of offense4  - Offenses built on high-volume, unassisted high accuracy 3s are less sustainable than other kinds of offense5   Then, we’ll explore which 2021-2022 NBA teams may have appeared better on offense and defense than they actually were."
  },
  {
    "objectID": "posts/nba_2020_2021_mirage_metrics/index.html#defenstive-mirage-metrics",
    "href": "posts/nba_2020_2021_mirage_metrics/index.html#defenstive-mirage-metrics",
    "title": "NBA Mirage Metrics:Looking for the Unsustainable",
    "section": "Defenstive Mirage Metrics",
    "text": "Defenstive Mirage Metrics\n\n\nCode\nopp_shot_league %>% \n  left_join(logos, by = \"team\") %>% \n  ggplot(aes(three_vs_league, long2_vs_league)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  geom_vline(xintercept = 0, linetype = \"dashed\") +\n  geom_image(aes(image = image_url)) +\n  # geom_text(data = plot_labels, aes(x, y, label = lab_text), size = 2) +\n  geom_abline(slope = -2.5, intercept = seq(from = -8, to = 8, by = 4)/100, alpha = .2) +\n  scale_x_reverse(label = percent) +\n  scale_y_reverse(label = percent) +\n  theme_minimal() +\n  theme(text = element_text(family = \"graduate\")) +\n  labs(x = \"Opponent 3P% vs. League Average\",\n       y = \"Opponent Long 2% vs. League Average\",\n       title = \"Defensive Mirage Metrics for Full 2021-2022 NBA Season\",\n       caption = \"Further Up & Right = More of a Mirage\")\n\n\n\n\n\nThese plots take inspiration from the expected points added plots popularized via the nflfastr package by Ben Baldwin.   These plots allow us to see defensive mirage tiers rather than hard and fast rankings. I like that this plot communicates the inherent uncertainty in these metrics in an interesting way.   From a basketball perspective, we can see you need to be lucky and good to be a top defense in the NBA. I don’t think anyone would argue that the Golden State Warriors had a bad defense last year, and their already excellent defense benefitted from a lot of poor opponent shooting luck.   A couple of teams with a larger gap between “the eye test” and their defensive ratings last season also show up among the luckiest teams on defense. Put it this way: I’m not betting on either the Mavs or the Knicks having a top-tier defense again in 2022-2023."
  },
  {
    "objectID": "posts/nba_2020_2021_mirage_metrics/index.html#offensive-mirage-metrics",
    "href": "posts/nba_2020_2021_mirage_metrics/index.html#offensive-mirage-metrics",
    "title": "NBA Mirage Metrics:Looking for the Unsustainable",
    "section": "Offensive Mirage Metrics",
    "text": "Offensive Mirage Metrics\n\n\nCode\nteam_shot_league %>% \n  left_join(logos, by = \"team\") %>% \n  ggplot(aes(three_mirage, long2_mirage)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  geom_vline(xintercept = 0, linetype = \"dashed\") +\n  geom_image(aes(image = image_url)) +\n  # geom_text(data = plot_labels, aes(x, y, label = lab_text), size = 2) +\n  geom_abline(slope = -2.5, intercept = seq(from = -7.5, to = 4.5, by = 3), alpha = .2) +\n  theme_minimal() +\n  theme(text = element_text(family = \"graduate\")) +\n  theme(axis.title = element_text(size = 9)) +\n  labs(x = \"Unassisted 3 Rate & 3P% vs. League Average - Z-Scored\",\n       y = \"Long 2 Volume & Long 2P% vs. League Average - Z-Scored\",\n       title = \"Offensive Mirage Metrics for Full 2021-2022 NBA Season\",\n       caption = \"Further Up & Right = More of a Mirage\")\n\n\n\n\n\nThe offensive mirage statistics continue the “need to be lucky and good” story. The Atlanta Hawks had the 2nd best offensive rating in the NBA during 2021-2022, and they had an absurdly high rate of accurate, unassisted 3 pointers. You can point to all the excellent shooting Atlanta had, and also recognize that some regression to the mean is likely in 2022-2023.   Same for Brooklyn and Chicago - two teams with absurdly elite midrange shooters that might still see a bit of regression in that category this year. Case in point, the Suns are also full of elite midrange shooters and are almost a full standard deviation below Chicago on the Long 2 mirage metric."
  },
  {
    "objectID": "posts/nba_2020_2021_mirage_metrics/index.html#additional-cleaning",
    "href": "posts/nba_2020_2021_mirage_metrics/index.html#additional-cleaning",
    "title": "NBA Mirage Metrics:Looking for the Unsustainable",
    "section": "Additional Cleaning",
    "text": "Additional Cleaning\nAs much fun as these plots are, they don’t weight 3 point luck more heavily than 2 point luck. I’ve also wanted to teach myself reactable and reactablefmtr for a bit, and this project gave me a great excuse! Shout out to Tanya Shapiro for introducing me to this package via Twitter.\n\n\nCode\ncleaned_table <- team_shot_league %>% \n  left_join(opp_shot_league, by = \"team\") %>% \n  left_join(logos, by = \"team\") %>% \n  mutate(across(\n    c(weighted_team_shot:long2_mirage),\n    ~round(.x, 1)\n  ),\n  across(\n    c(weighted_team_shot:long2_mirage),\n    ~case_when(\n    .x < 0 ~ \"#127852\",\n    .x > 0 ~  '#C40233',\n    TRUE ~ '#A5A0A1'\n    ),\n    .names = \"colors_{col}\"\n  ),\n  across(\n    c(weighted_opp_shot:long2_vs_league),\n    ~case_when(\n    .x < 0 ~ '#C40233',\n    .x > 0 ~  \"#127852\",\n    TRUE ~ '#A5A0A1'\n    ),\n    .names = \"colors_{col}\"\n  )\n  ) \n\n\nThere was a bit more cleaning necessary to prepare the data for these tables, and I went through several iterations before settling on the current versions.\n\n\nCode\ninitial_table <- cleaned_table %>% \n  rename(Team = team, `Total Offensive Mirage` = weighted_team_shot, \n         `Offensive Mirage 3` = three_mirage,\n         `Offensive Mirage Long 2` = long2_mirage,\n         `Opponent Long-Range EFG% vs. League Average` = weighted_opp_shot,\n         `Opponent 3P% vs. League Average` = three_vs_league,\n         `Opponent Long 2% vs. League Average` = long2_vs_league) %>% \n  relocate(image_url, Team, everything())\n\n\nHuge shout-out to the extensive vignettes and documentation behind the reactablefmtr package. Going from 0 to these tables was a much smoother, more interesting process than I anticipated!\n\n\nCode\noff_metrics_table <- initial_table %>% \n  select(image_url, Team, contains(\"Offensive\"),c(colors_weighted_team_shot:colors_long2_mirage))\n\ndef_metrics_table <- initial_table %>% \n  select(image_url, Team, contains(\"Opponent\"),c(colors_weighted_opp_shot:colors_long2_vs_league))"
  },
  {
    "objectID": "posts/nba_2020_2021_mirage_metrics/index.html#defensive-mirage-metrics",
    "href": "posts/nba_2020_2021_mirage_metrics/index.html#defensive-mirage-metrics",
    "title": "NBA Mirage Metrics:Looking for the Unsustainable",
    "section": "Defensive Mirage Metrics",
    "text": "Defensive Mirage Metrics\n\n\nCode\ndef_metrics_table %>% \nreactable(\n          pagination = FALSE,\n          searchable = TRUE,\n          defaultSorted = \"Opponent Long-Range EFG% vs. League Average\",\n          style = list(fontFamily = \"graduate\"),\n          theme = espn(centered = TRUE, header_font_size = 10, \n                       cell_padding = 7),\n          columns = list(\n          colors_weighted_opp_shot = colDef(show = FALSE),\n          colors_three_vs_league = colDef(show = FALSE),\n          colors_long2_vs_league = colDef(show = FALSE),\n          image_url = colDef(\n                name = \"\",\n                maxWidth = 50,\n                sortable = FALSE,\n                # render team logos from their image address\n                style = background_img()\n              ),\n          `Opponent Long-Range EFG% vs. League Average` = colDef(\n            align = \"center\",\n            cell = data_bars(initial_table,\n                             text_position = \"outside-base\", \n                             number_fmt = percent,\n                             fill_color_ref = \"colors_weighted_opp_shot\"\n          )),\n          `Opponent 3P% vs. League Average` = colDef(\n            align = \"center\",\n            cell = data_bars(initial_table,\n                             text_position = \"outside-base\", \n                             number_fmt = percent,\n                             fill_color_ref = \"colors_three_vs_league\"\n          )),\n          `Opponent Long 2% vs. League Average` = colDef(\n            align = \"center\",\n            cell = data_bars(initial_table,\n                             text_position = \"outside-base\", \n                             number_fmt = percent,\n                             fill_color_ref = \"colors_long2_vs_league\"\n          )\n          )\n          )\n) %>% \n    add_title(\n    title = reactablefmtr::html('Defensive Mirage Metrics:<br>2021-2022 NBA Season')\n  ) %>% \n  add_subtitle(\n    subtitle = \"Lower %s = More Mirage\",\n    font_size = 20,\n    font_color = '#666666'\n  ) %>% \n  google_font(\"Graduate\")\n\n\n\nDefensive Mirage Metrics:2021-2022 NBA Season\nLower %s = More Mirage\n\n\n\n\n\n The table matches pretty well with our earlier visualization! You can play around with the sorting by clicking on each column title or focus on your favorite team by typing it in the search bar."
  },
  {
    "objectID": "posts/nba_2020_2021_mirage_metrics/index.html#offensive-mirage-metrics-1",
    "href": "posts/nba_2020_2021_mirage_metrics/index.html#offensive-mirage-metrics-1",
    "title": "NBA Mirage Metrics:Looking for the Unsustainable",
    "section": "Offensive Mirage Metrics",
    "text": "Offensive Mirage Metrics\n\n\nCode\nreactable(off_metrics_table,\n          pagination = FALSE,\n          searchable = TRUE,\n          defaultSortOrder = \"desc\",\n          defaultSorted = \"Total Offensive Mirage\",\n          style = list(fontFamily = \"graduate\"),\n          theme = espn(centered = TRUE, header_font_size = 12, \n                       cell_padding = 7),\n          columns = list(\n          colors_weighted_team_shot = colDef(show = FALSE),\n          colors_three_mirage = colDef(show = FALSE),\n          colors_long2_mirage = colDef(show = FALSE),\n          image_url = colDef(\n                name = \"\",\n                maxWidth = 50,\n                sortable = FALSE,\n                # render team logos from their image address\n                style = background_img()\n              ),\n          `Total Offensive Mirage` = colDef(\n      align = 'center',\n      minWidth = 200,\n      cell = data_bars(\n        data = initial_table,\n        fill_color = '#EEEEEE',\n        text_position = 'outside-end',\n        max_value = max(initial_table$`Total Offensive Mirage`),\n        icon = 'circle',\n        icon_color_ref = \"colors_weighted_team_shot\",\n        icon_size = 15,\n        text_color_ref = \"colors_weighted_team_shot\",\n        round_edges = TRUE\n      )),\n      `Offensive Mirage 3` = colDef(\n      align = 'center',\n      minWidth = 200,\n      cell = data_bars(\n        data = initial_table,\n        fill_color = '#EEEEEE',\n        text_position = 'outside-end',\n        max_value = max(initial_table$`Offensive Mirage 3`),\n        icon = 'circle',\n        icon_color_ref = 'colors_three_mirage',\n        icon_size = 15,\n        text_color_ref = 'colors_three_mirage',\n        round_edges = TRUE\n      )),\n      `Offensive Mirage Long 2` = colDef(\n      align = 'center',\n      minWidth = 200,\n      cell = data_bars(\n        data = initial_table,\n        fill_color = '#EEEEEE',\n        text_position = 'outside-end',\n        max_value = max(initial_table$`Offensive Mirage Long 2`),\n        icon = 'circle',\n        icon_color_ref = 'colors_long2_mirage',\n        icon_size = 15,\n        text_color_ref = 'colors_long2_mirage',\n        round_edges = TRUE\n      ))\n          )\n) %>% \n    add_title(\n    title = html('Offensive Mirage Metrics:<br>2021-2022 NBA Season')\n  ) %>% \n  add_subtitle(\n    subtitle = html(\"<i class='fas fa-link'></i> Higher Numbers = More Mirage | <a href='https://www.investopedia.com/terms/z/zscore.asp'>{Metrics are Z-Scored}</a>\"),\n    font_size = 20,\n    font_color = '#666666'\n  ) %>% \n  google_font(\"Graduate\")\n\n\n\nOffensive Mirage Metrics:2021-2022 NBA Season\n Higher Numbers = More Mirage | {Metrics are Z-Scored}\n\n\n\n\n\n Looking at the other end of the mirage spectrum, the Memphis Grizzlies already great-looking offense in 2021-2022 might have been held by bad luck. Counting on them to regress offensively in 2022-2023 seems like a bad bet.   On the programming side: The conditional formatting and “visualizations within tables” capabilities unlocked by reactablefmtr are fantastic. I really like gt for table building, and if I want something interactive I think I’ll default to reactablefmtr."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rigorous Data Science, Translated for Humans",
    "section": "",
    "text": "Michael Mullarkey\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLast generated on: r Sys.Date()\n\n\n\n\n\n\n\n\n\nOct 25, 2022\n\n\nMike Mahoney & Michael Mullarkey\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLast generated on: r Sys.Date()\n\n\n\n\n\n\n\n\n\nOct 25, 2022\n\n\nMike Mahoney & Michael Mullarkey\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLast generated on: r Sys.Date()\n\n\n\n\n\n\n\n\n\nOct 25, 2022\n\n\nMike Mahoney & Michael Mullarkey\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLast generated on: r Sys.Date()\n\n\n\n\n\n\n\n\n\nOct 25, 2022\n\n\nMike Mahoney & Michael Mullarkey\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLast generated on: r Sys.Date()\n\n\n\n\n\n\n\n\n\nOct 25, 2022\n\n\nMike Mahoney & Michael Mullarkey\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLast generated on: r Sys.Date()\n\n\n\n\n\n\n\n\n\nOct 25, 2022\n\n\nMike Mahoney & Michael Mullarkey\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\nQuarto\n\n\nReport-Making\n\n\n\n\nCreate Ultra-Parameterized Reports Disguised as Custom Reports with Quarto and Mustache\n\n\n\n\n\n\nOct 17, 2022\n\n\nMichael Mullarkey\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\nnba\n\n\n\n\nLooking for the Unsustainable\n\n\n\n\n\n\nOct 17, 2022\n\n\nMichael Mullarkey\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/index.html",
    "href": "posts/2022_10_20_ultra_parameterized_reports/index.html",
    "title": "Parameterized Reports in Disguise",
    "section": "",
    "text": "At one of my jobs we ran ~monthly pilot studies. Strong performance in each pilot was key to securing business long-term. Naturally, knowing how well we were doing in the pilot as quickly as possible was top priority. The pilot report could help identify potential pain points, let everyone breathe a sigh of relief, or1 a bit of both.   One problem: pilot reports before I arrived were redone by hand for every pilot. While some of the code from previous pilots could be copy/pasted that introduced a whole new set of issues. This ad-hoc approach meant each pilot report took almost a full work week to build.2   After I introduced ultra-parameterized reports, we were able to provide pilot reports the moment the data became available.3 Other decision-makers could react faster, and the company’s capacity to capitalize on the report grew a ton."
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/index.html#example-script-without-parameters",
    "href": "posts/2022_10_20_ultra_parameterized_reports/index.html#example-script-without-parameters",
    "title": "Parameterized Reports in Disguise",
    "section": "Example Script Without Parameters",
    "text": "Example Script Without Parameters\nHere’s a script that gives you an incredible amount of information on elevators in New York but isn’t parameterized yet.\n---\ntitle: \"Cool graphs about elevators\"\nauthor: Mike Mahoney\nsubtitle: \"Last generated on:\"\ndate: today\nformat:\n  html:\n    echo: false\n---\n\n```{r}\n#| message: false\nlibrary(elevators)\nlibrary(ggplot2)\ntheme_set(theme_minimal())\n```\n\n## Speed over time\n\n```{r}\n#| message: false\n#| warning: false\nelevators |>\n  ggplot(aes(approval_date, speed_fpm)) +\n  geom_point(alpha = 0.05) +\n  geom_smooth() +\n  scale_y_log10()\n```\n\n## Speed versus capacity\n\n```{r}\n#| message: false\n#| warning: false\nelevators |>\n  ggplot(aes(capacity_lbs, speed_fpm)) +\n  geom_point(alpha = 0.05) +\n  geom_smooth() +\n  scale_y_log10()\n```\n\n## Where in the world did all my elevators go\n\n```{r}\nelevators |>\n  ggplot(aes(longitude, latitude)) + \n  geom_point(alpha = 0.05) +\n  coord_sf()\n```"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/index.html#example-script-with-parameters",
    "href": "posts/2022_10_20_ultra_parameterized_reports/index.html#example-script-with-parameters",
    "title": "Parameterized Reports in Disguise",
    "section": "Example Script With Parameters",
    "text": "Example Script With Parameters\nAnd here’s a parameterized script that gives you an incredible amount of information on elevators specifically in Manhattan.   The key difference here isn’t so much that we can get info on Manhattan, it’s that we can swap out “Brooklyn” for “Manhattan” in about 0.2 seconds to re-run the report. A lot less manual work than copy-pasting Brooklyn for Manhattan everywhere and hoping we didn’t miss anything!  \n---\ntitle: \"Cool graphs about elevators\"\nauthor: Mike Mahoney\nsubtitle: \"Last generated on: 2022-10-25\"\ndate: today\nformat: \n  html: \n    echo: false\nparams: \n  borough: \"Manhattan\"\n---\n\n```{r}\n#| message: false\nlibrary(elevators)\n\nif (!is.na(params$borough) && params$borough != \"NA\") {\n  elevators <- elevators[elevators$borough == params$borough, ]\n}\nif (nrow(elevators) == 0) {\n  stop(\"No elevators were selected. Did you misspell `borough`?\")\n}\n\nlibrary(ggplot2)\ntheme_set(theme_minimal())\n```\n\n## Speed over time\n\n```{r}\n#| message: false\n#| warning: false\nelevators |> \n  ggplot(aes(approval_date, speed_fpm)) + \n  geom_point(alpha = 0.05) + \n  geom_smooth() + \n  scale_y_log10()\n```\n\n## Speed versus capacity\n\n```{r}\n#| message: false\n#| warning: false\nelevators |> \n  ggplot(aes(capacity_lbs, speed_fpm)) + \n  geom_point(alpha = 0.05) + \n  geom_smooth() + \n  scale_y_log10()\n```\n\n## Where in the world did all my elevators go\n\n```{r}\nelevators |> \n  ggplot(aes(longitude, latitude)) + \n  geom_point(alpha = 0.05) + \n  coord_sf()\n```"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/index.html#we-were-promised-disguises",
    "href": "posts/2022_10_20_ultra_parameterized_reports/index.html#we-were-promised-disguises",
    "title": "Parameterized Reports in Disguise",
    "section": "We Were Promised Disguises",
    "text": "We Were Promised Disguises\nThis is where mustache starts providing the “ultra” in “ultra-parameterized.” Using the whisker package implementation in R, we can create a version of the script that will allow us to programmatically specify the borough during report creation.   The only difference between this version and the parameterized report is replacing “Manhattan” with “{{ borough }}”\n---\ntitle: \"Cool graphs about elevators\"\nauthor: Mike Mahoney\nsubtitle: \"Last generated on: 2022-10-25\"\ndate: today\nformat: \n  html: \n    echo: false\nparams: \n  borough: {{ borough }}\n---\n\n```{r}\n#| message: false\n#| results: false\nlibrary(elevators)\n\nif (!is.na(params$borough) && params$borough != \"NA\") {\n  elevators <- elevators[elevators$borough == params$borough, ]\n}\nif (nrow(elevators) == 0) {\n  stop(\"No elevators were selected. Did you misspell `borough`?\")\n}\n\nlibrary(ggplot2)\ntheme_set(theme_minimal())\n```\n\n## Speed over time\n\n```{r}\n#| message: false\n#| warning: false\nelevators |> \n  ggplot(aes(approval_date, speed_fpm)) + \n  geom_point(alpha = 0.05) + \n  geom_smooth() + \n  scale_y_log10()\n```\n\n## Speed versus capacity\n\n```{r}\n#| message: false\n#| warning: false\nelevators |> \n  ggplot(aes(capacity_lbs, speed_fpm)) + \n  geom_point(alpha = 0.05) + \n  geom_smooth() + \n  scale_y_log10()\n```\n\n## Where in the world did all my elevators go\n\n```{r}\nelevators |> \n  ggplot(aes(longitude, latitude)) + \n  geom_point(alpha = 0.05) + \n  coord_sf()\n```"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Manhattan_2022-10-25.html",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Manhattan_2022-10-25.html",
    "title": "Cool graphs about elevators",
    "section": "",
    "text": "── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nAttaching package: 'rvest'\n\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nLoading required package: reactable\n\n\nAttaching package: 'reactablefmtr'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\n\nLoading required package: sysfonts\n\nLoading required package: showtextdb"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Manhattan_2022-10-25.html#speed-over-time",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Manhattan_2022-10-25.html#speed-over-time",
    "title": "Cool graphs about elevators",
    "section": "Speed over time",
    "text": "Speed over time"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Manhattan_2022-10-25.html#speed-versus-capacity",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Manhattan_2022-10-25.html#speed-versus-capacity",
    "title": "Cool graphs about elevators",
    "section": "Speed versus capacity",
    "text": "Speed versus capacity"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Manhattan_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Manhattan_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "title": "Cool graphs about elevators",
    "section": "Where in the world did all my elevators go",
    "text": "Where in the world did all my elevators go"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Bronx_2022-10-25.html",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Bronx_2022-10-25.html",
    "title": "Cool graphs about elevators",
    "section": "",
    "text": "── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nAttaching package: 'rvest'\n\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nLoading required package: reactable\n\n\nAttaching package: 'reactablefmtr'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\n\nLoading required package: sysfonts\n\nLoading required package: showtextdb"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Bronx_2022-10-25.html#speed-over-time",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Bronx_2022-10-25.html#speed-over-time",
    "title": "Cool graphs about elevators",
    "section": "Speed over time",
    "text": "Speed over time"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Bronx_2022-10-25.html#speed-versus-capacity",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Bronx_2022-10-25.html#speed-versus-capacity",
    "title": "Cool graphs about elevators",
    "section": "Speed versus capacity",
    "text": "Speed versus capacity"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Bronx_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Bronx_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "title": "Cool graphs about elevators",
    "section": "Where in the world did all my elevators go",
    "text": "Where in the world did all my elevators go"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Brooklyn_2022-10-25.html",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Brooklyn_2022-10-25.html",
    "title": "Cool graphs about elevators",
    "section": "",
    "text": "── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nAttaching package: 'rvest'\n\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nLoading required package: reactable\n\n\nAttaching package: 'reactablefmtr'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\n\nLoading required package: sysfonts\n\nLoading required package: showtextdb"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Brooklyn_2022-10-25.html#speed-over-time",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Brooklyn_2022-10-25.html#speed-over-time",
    "title": "Cool graphs about elevators",
    "section": "Speed over time",
    "text": "Speed over time"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Brooklyn_2022-10-25.html#speed-versus-capacity",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Brooklyn_2022-10-25.html#speed-versus-capacity",
    "title": "Cool graphs about elevators",
    "section": "Speed versus capacity",
    "text": "Speed versus capacity"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Brooklyn_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Brooklyn_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "title": "Cool graphs about elevators",
    "section": "Where in the world did all my elevators go",
    "text": "Where in the world did all my elevators go"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Queens_2022-10-25.html",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Queens_2022-10-25.html",
    "title": "Cool graphs about elevators",
    "section": "",
    "text": "── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nAttaching package: 'rvest'\n\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nLoading required package: reactable\n\n\nAttaching package: 'reactablefmtr'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\n\nLoading required package: sysfonts\n\nLoading required package: showtextdb"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Queens_2022-10-25.html#speed-over-time",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Queens_2022-10-25.html#speed-over-time",
    "title": "Cool graphs about elevators",
    "section": "Speed over time",
    "text": "Speed over time"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Queens_2022-10-25.html#speed-versus-capacity",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Queens_2022-10-25.html#speed-versus-capacity",
    "title": "Cool graphs about elevators",
    "section": "Speed versus capacity",
    "text": "Speed versus capacity"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Queens_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Queens_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "title": "Cool graphs about elevators",
    "section": "Where in the world did all my elevators go",
    "text": "Where in the world did all my elevators go"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Staten Island_2022-10-25.html",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Staten Island_2022-10-25.html",
    "title": "Cool graphs about elevators",
    "section": "",
    "text": "── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nAttaching package: 'rvest'\n\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nLoading required package: reactable\n\n\nAttaching package: 'reactablefmtr'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\n\nLoading required package: sysfonts\n\nLoading required package: showtextdb"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Staten Island_2022-10-25.html#speed-over-time",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Staten Island_2022-10-25.html#speed-over-time",
    "title": "Cool graphs about elevators",
    "section": "Speed over time",
    "text": "Speed over time"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Staten Island_2022-10-25.html#speed-versus-capacity",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Staten Island_2022-10-25.html#speed-versus-capacity",
    "title": "Cool graphs about elevators",
    "section": "Speed versus capacity",
    "text": "Speed versus capacity"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Staten Island_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Staten Island_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "title": "Cool graphs about elevators",
    "section": "Where in the world did all my elevators go",
    "text": "Where in the world did all my elevators go"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/index.html#creating-a-function-to-run-render-many-reports",
    "href": "posts/2022_10_20_ultra_parameterized_reports/index.html#creating-a-function-to-run-render-many-reports",
    "title": "Parameterized Reports in Disguise",
    "section": "Creating a Function to Run + Render Many Reports",
    "text": "Creating a Function to Run + Render Many Reports\nWe now need another file that will replace “{{ borough }}” with the appropriate boroughs and render each report.\n---\ntitle: \"Create All Borough Reports\"\nauthor: \"Michael Mullarkey\"\n---\n\n# Load Packages\n\n```{r}\n\nlibrary(whisker)    # For replacing {{ }} text\nlibrary(tidyverse)  # For function creation + data wrangling\nlibrary(glue)       # For programmatic file naming\nlibrary(lubridate)  # For today()\nlibrary(here)       # For better file paths\nlibrary(quarto)     # For rendering\nlibrary(elevators)  # For elevators data\n\n```\n\n# Use Whisker to Modify Template .qmd File with Desired Values\n\n```{r}\n\nuse_borough_template <- function(borough, file_name) {\n  \n  raw_qmd <- readLines(file_name) # Reading in full .qmd file\n  \n  filled_qmd <- whisker.render(raw_qmd) # Replace {{}} with borough value \n  \n  writeLines(\n    text = filled_qmd,\n    con = glue(\"{borough}_{today()}.qmd\") # Programmatic naming so we don't\n    # just overwrite the same file again and again when we iterate\n  )\n    \n}\n\n```\n\n# Render .qmd Files Using Programmatic Names\n\n```{r}\n\nrender_borough_template <- function(borough, file_name) {\n  \n  quarto_render(\n    input = glue(\"{borough}_{today()}.qmd\")\n  )\n  \n}\n\n```\n\n# Put Both Functions Together So We Only Have to Make One Function Call\n\n```{r}\n\ncreate_borough_report <- function(borough, file_name) {\n  \n  use_borough_template(borough = borough, file_name = file_name)\n  \n  render_borough_template(borough = borough, file_name = file_name)\n  \n}\n\n```\n\n# Testing the report creation once before going on to programmatic\n\n```{r}\n\n# Testing the report creation once before going on to programmatic\n\n# create_borough_report(borough = \"Manhattan\", file_name = \"borough_template.qmd\")\n\n```\n\n# Creating a dataframe of information to map over\n\n```{r}\n\n# Create data frame to map over for borough reports\n\nall_boroughs <- elevators::elevators %>% \n  distinct(borough) %>% \n  deframe()\n\nfile_name_vec <- rep(\"borough_template.qmd\", length(all_boroughs))\n\nboroughs_report_df <- tibble(all_boroughs, file_name_vec)\n\n```\n\n# Map over all borough reports\n\n```{r}\n\n# This also could be walk because we're really just looking for side effects!\n\n# Not necessary to do pmap for this example but it's more extensible to if you\n# need to use more than 2 paramters (otherwise can use map or map2)\n\npmap(\n  boroughs_report_df,\n  ~create_borough_report(\n    borough = ..1,\n    file_name = ..2\n  )\n)\n\n```\nOnce you have a file like this that can programmatically replace your parameters and render reports you’re good to go! You can check out the   If stakeholders have a small tweak they want to one report but not others you can make that edit just in one .qmd file and then re-render it.9"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Manhattan_2022-10-25.html#speed-over-time",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Manhattan_2022-10-25.html#speed-over-time",
    "title": "Cool graphs about elevators",
    "section": "Speed over time",
    "text": "Speed over time"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Manhattan_2022-10-25.html#speed-versus-capacity",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Manhattan_2022-10-25.html#speed-versus-capacity",
    "title": "Cool graphs about elevators",
    "section": "Speed versus capacity",
    "text": "Speed versus capacity"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Manhattan_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Manhattan_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "title": "Cool graphs about elevators",
    "section": "Where in the world did all my elevators go",
    "text": "Where in the world did all my elevators go"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Bronx_2022-10-25.html#speed-over-time",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Bronx_2022-10-25.html#speed-over-time",
    "title": "Cool graphs about elevators",
    "section": "Speed over time",
    "text": "Speed over time"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Bronx_2022-10-25.html#speed-versus-capacity",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Bronx_2022-10-25.html#speed-versus-capacity",
    "title": "Cool graphs about elevators",
    "section": "Speed versus capacity",
    "text": "Speed versus capacity"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Bronx_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Bronx_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "title": "Cool graphs about elevators",
    "section": "Where in the world did all my elevators go",
    "text": "Where in the world did all my elevators go"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Brooklyn_2022-10-25.html#speed-over-time",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Brooklyn_2022-10-25.html#speed-over-time",
    "title": "Cool graphs about elevators",
    "section": "Speed over time",
    "text": "Speed over time"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Brooklyn_2022-10-25.html#speed-versus-capacity",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Brooklyn_2022-10-25.html#speed-versus-capacity",
    "title": "Cool graphs about elevators",
    "section": "Speed versus capacity",
    "text": "Speed versus capacity"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Brooklyn_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Brooklyn_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "title": "Cool graphs about elevators",
    "section": "Where in the world did all my elevators go",
    "text": "Where in the world did all my elevators go"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Queens_2022-10-25.html#speed-over-time",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Queens_2022-10-25.html#speed-over-time",
    "title": "Cool graphs about elevators",
    "section": "Speed over time",
    "text": "Speed over time"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Queens_2022-10-25.html#speed-versus-capacity",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Queens_2022-10-25.html#speed-versus-capacity",
    "title": "Cool graphs about elevators",
    "section": "Speed versus capacity",
    "text": "Speed versus capacity"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Queens_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Queens_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "title": "Cool graphs about elevators",
    "section": "Where in the world did all my elevators go",
    "text": "Where in the world did all my elevators go"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Staten Island_2022-10-25.html#speed-over-time",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Staten Island_2022-10-25.html#speed-over-time",
    "title": "Cool graphs about elevators",
    "section": "Speed over time",
    "text": "Speed over time"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Staten Island_2022-10-25.html#speed-versus-capacity",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Staten Island_2022-10-25.html#speed-versus-capacity",
    "title": "Cool graphs about elevators",
    "section": "Speed versus capacity",
    "text": "Speed versus capacity"
  },
  {
    "objectID": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Staten Island_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "href": "posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/quarto_files/Staten Island_2022-10-25.html#where-in-the-world-did-all-my-elevators-go",
    "title": "Cool graphs about elevators",
    "section": "Where in the world did all my elevators go",
    "text": "Where in the world did all my elevators go"
  }
]