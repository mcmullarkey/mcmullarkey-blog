{
  "hash": "5c71095cd76b0ee68958d136ebd0e07f",
  "result": {
    "markdown": "---\ntitle: \"Introducing mlcheck\"\ndescription: \"A Rust-based command line tool to check for ML best practices\"\nauthor: \"Michael Mullarkey\"\ndate: \"2024-06-19\"\nformat: \n  html:\n    code-fold: false\n    toc: true\ncategories: [Rust, Python, SQL, ML, Best Practices]\nengine: knitr\n---\n\n\n# Why create mlcheck?\n\n[`mlcheck`](https://github.com/mcmullarkey/mlcheck){target=\"_blank\"} exists because we're all human, and remembering to follow ML best practices is hard. Even when we already know what a good workflow looks like. Even when we've been coding for years. And especially when we think we don't need a quick double-check.\n\n`mlcheck` is a Rust-based command line tool that can programmatically check for the presence of ML best practices in coding documents. You can feed it a single file path:\n\n\n::: {.cell}\n\n```{.shell .cell-code}\n\n# mlcheck --path path/to/your_file_name.py\n\n```\n:::\n\n\nor a folder full of files\n\n\n::: {.cell}\n\n```{.shell .cell-code}\n\n# mlcheck --path path/to/folder/\n\n```\n:::\n\n\nThe current version of the tool can detect `scikit-learn` style Python code in .py or .ipynb[^1] files.[^2]\n\nThink of mlcheck as a spell-check equivalent for ML best practices. Spell-check can help keep us from making silly mistakes, and it's still a somewhat faulty warning light that will miss corner cases.\n\n# What is mlcheck for?\n\nI primarily see this tool as a way to check myself. The idea for mlcheck came to me after I realized I'd forgotten to set a `random_state` to make my train/test split reproducible!\n\nAnd I would be lying if I said I wasn't curious how often these best practices get used in the wild. \n\nSo, I created a shell script to download a couple hundred+[^3] .py files from Github that contain \"sklearn\" \n\nI used this pattern as a rough proxy for people implementing `scikit-learn` style Python code.\n\nAfter downloading all those files into a `downloaded_files/` directory, I ran `mlcheck` on the entire directory.\n\nHere's what `mlcheck`'s output looks like on the command line for a single file\n\n![mlcheck output showing mlcheck with ascii art and displaying which best practice checks were passed and failed along with the percentage of checks passed](images/mlcheck_example_output.png)\n\nFirst, this tool absolutely did not have to be in Rust[^4], but wow was this implementation fast.\n\nAccording to [a SQL query](https://github.com/mcmullarkey/mlcheck_demo/blob/main/mlcheck_speed.sql){target=\"_blank\"} on the database created by running the checks, `mlcheck` performed all the best practice checks across hundreds of files in 0.94 seconds.\n\nAnd best-practice usage was by no means universal. [Another SQL query](https://github.com/mcmullarkey/mlcheck_demo/blob/main/mlcheck_analytics.sql){target=\"_blank\"} showed that while at least one file passed 100% of the best-practice checks, the average for checks passed was just 33.48%. This is even more remarkable when you consider the minimum percentage of checks passed was 20%, since one of the checks is whether sklearn is detected or not.\n\nI don't want to pretend this is a representative sample, and people could have been using these code files in many situations where best practices might be unnecessary.\n\nAnd reflecting on myself, I know there are times where I've skipped past best practices because \"I know what I'm doing!\" It certainly seems like I'm not alone in that boat.\n\nIf you're interested in checking out the demo, the entire repo is [here](https://github.com/mcmullarkey/mlcheck_demo){target=\"_blank\"}\n\n# What if I want to use mlcheck?\n\nIf you're interested in using `mlcheck` check out its repo [here](https://github.com/mcmullarkey/mlcheck){target=\"_blank\"} for installation and usage instructions. This tool is still pretty new so there's definitely a chance of breaking changes. However, I know this tool has already saved me at least once, and I want others to have that opportunity as well. \n\n[^1]: Jupyter notebooks, which btw have the wildest file extension\n\n[^2]: tidymodels style code in .R, .Rmd, and .qmd files is on the roadmap\n\n[^3]: I ran into Github rate limits going much higher than that at once, and even still didn't always get a consistent number of downloads using a lower number.\n\n[^4]: I wanted to learn more Rust and used this project as an excuse!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}