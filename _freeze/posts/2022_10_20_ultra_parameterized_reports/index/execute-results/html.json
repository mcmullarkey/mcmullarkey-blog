{
  "hash": "b52093a38c0e8693936c5019bba85123",
  "result": {
    "markdown": "---\ntitle: \"Parameterized Reports in Disguise\"\ndescription: \"Create Ultra-Parameterized Reports Disguised as Custom Reports with Quarto and Mustache\"\nauthor: \"Michael Mullarkey\"\ndate: \"2022-10-17\"\nformat: \n  html:\n    code-fold: true\n    toc: true\ncategories: [R, Quarto, Report-Making]\nengine: knitr\n---\n\n\n# Why Should I Care?\n\n## Quick Case Study\n\n### Reducing Pilot Report Latency by 400% Using Ultra-Parameterized Reports\n\nAt one of my jobs we ran ~monthly pilot studies. Strong performance in each pilot was key to securing business long-term. Naturally, knowing how well we were doing in the pilot as quickly as possible was top priority. The pilot report could help identify potential pain points, let everyone breathe a sigh of relief, or^[most likely!] a bit of both. <br>\n<br>\nOne problem: pilot reports before I arrived were redone by hand for every pilot. While some of the code from previous pilots could be copy/pasted that introduced a whole new set of issues. This ad-hoc approach meant each pilot report took almost a full work week to build.^[Including stakeholder back and forth on custom parts of the report]\n<br>\n<br>\nAfter I introduced ultra-parameterized reports, we were able to provide pilot reports the moment the data became available.^[within 1 day of the pilot starting] Other decision-makers could react faster, and the company's capacity to capitalize on the report grew a ton. \n\n# The Inevitablity of Reports\n\nI believe three things^[Ok, maybe some other stuff too but I'm trying to keep the non-footnotes part of the post focused!] are true: <br>\n<br>\n1. Data practitioners need to make reports.^[If you have somehow had an entire career trajectory where you haven't had to make reports for stakeholders, congrats! Seems outside the norm to me in 2022, though who knows how well this will age]<br>\n2. Data practitioners would rather do^[almost] anything other than copy and paste info <br>\n3. You shouldn't need to do #2 to accomplish #1\n\n# \"Vanilla\" Parameterized Reports\n\nCreating a [parameterized report with Quarto](https://quarto.org/docs/computations/parameters.html){target=\"_blank\"} can be a lifesaver when stakeholders change their minds. <br>\n<br>\nGone are the days of having to go in manually to change a key variable throughout the script.^[Yes, this includes the risky \"Find and Replace All\" strategy] Instead, you can just change the parameter in the .yml chunk at the start of the document. <br>\n<br>\nLet's look at an example from an [excellent blog post on parameterized reports in Quarto](https://www.mm218.dev/posts/2022-08-04-how-to-use-quarto-for-parameterized-reporting/){target=\"_blank\"} by [Mike Mahoney](https://www.mm218.dev/){target=\"_blank\"}.\n\n## Example Script Without Parameters\n\nHere's a script that gives you an incredible amount of information on elevators in New York but isn't parameterized yet.\n\n```` markdown\n---\ntitle: \"Cool graphs about elevators\"\nauthor: Mike Mahoney\nsubtitle: \"Last generated on:\"\ndate: today\nformat:\n  html:\n    echo: false\n---\n\n```{{r}}\n#| message: false\nlibrary(elevators)\nlibrary(ggplot2)\ntheme_set(theme_minimal())\n```\n\n## Speed over time\n\n```{{r}}\n#| message: false\n#| warning: false\nelevators |>\n  ggplot(aes(approval_date, speed_fpm)) +\n  geom_point(alpha = 0.05) +\n  geom_smooth() +\n  scale_y_log10()\n```\n\n## Speed versus capacity\n\n```{{r}}\n#| message: false\n#| warning: false\nelevators |>\n  ggplot(aes(capacity_lbs, speed_fpm)) +\n  geom_point(alpha = 0.05) +\n  geom_smooth() +\n  scale_y_log10()\n```\n\n## Where in the world did all my elevators go\n\n```{{r}}\nelevators |>\n  ggplot(aes(longitude, latitude)) + \n  geom_point(alpha = 0.05) +\n  coord_sf()\n```\n````\n\n\n\n## Example Script With Parameters\n\nAnd here's a parameterized script that gives you an incredible amount of information on elevators specifically in Manhattan. <br>\n<br>\nThe key difference here isn't so much that we can get info on Manhattan, it's that we can swap out \"Brooklyn\" for \"Manhattan\" in about 0.2 seconds to re-run the report. A lot less manual work than copy-pasting Brooklyn for Manhattan everywhere and hoping we didn't miss anything! <br>\n<br>\n\n```` markdown\n---\ntitle: \"Cool graphs about elevators\"\nauthor: Mike Mahoney\nsubtitle: \"Last generated on: 2022-10-25\"\ndate: today\nformat: \n  html: \n    echo: false\nparams: \n  borough: \"Manhattan\"\n---\n\n```{{r}}\n#| message: false\nlibrary(elevators)\n\nif (!is.na(params$borough) && params$borough != \"NA\") {\n  elevators <- elevators[elevators$borough == params$borough, ]\n}\nif (nrow(elevators) == 0) {\n  stop(\"No elevators were selected. Did you misspell `borough`?\")\n}\n\nlibrary(ggplot2)\ntheme_set(theme_minimal())\n```\n\n## Speed over time\n\n```{{r}}\n#| message: false\n#| warning: false\nelevators |> \n  ggplot(aes(approval_date, speed_fpm)) + \n  geom_point(alpha = 0.05) + \n  geom_smooth() + \n  scale_y_log10()\n```\n\n## Speed versus capacity\n\n```{{r}}\n#| message: false\n#| warning: false\nelevators |> \n  ggplot(aes(capacity_lbs, speed_fpm)) + \n  geom_point(alpha = 0.05) + \n  geom_smooth() + \n  scale_y_log10()\n```\n\n## Where in the world did all my elevators go\n\n```{{r}}\nelevators |> \n  ggplot(aes(longitude, latitude)) + \n  geom_point(alpha = 0.05) + \n  coord_sf()\n```\n````\n\n\n\n# Parameterize for Peace of Mind\n\nIf there's any chance stakeholders will change their minds about key aspects of the analysis, I think it's worth parameterizing the report.^[Yes, I definitely lean toward parameterization, maybe too much!]\n\nI think folks should be allowed to change their minds, and \"vanilla\" parameterizing makes your reports process more robust to changing demands. They also save us time and energy during periods when timelines are tight.\n\n# Ultra-Parameterized Reports\n\nAnd here's the thing: Replacing \"Manhattan\" with \"Brooklyn\" is still manual work. I don't think we should over-optimize processes, and if you only need to make occasional manual edits to your parameters that's great. <br>\n<br>\nBut what if you have to make an elevator report for 1,000 cities around the world? <br>\n<br>\nEven if manually updating each file only takes 0.2 seconds, you'd still be manually typing for an hour andd forty minutes. Plus, if you do a good enough job they might want that report every week, and all of a sudden parameterized reports feel like a drop of water on a raging fire.\n\n## We Were Promised Disguises\n\nThis is where [`mustache`](https://mustache.github.io/){target=\"_blank\"} starts providing the \"ultra\" in \"ultra-parameterized.\" Using the [`whisker`](https://github.com/edwindj/whisker){target=\"_blank\"} package implementation in R, we can create a version of the script that will allow us to programmatically specify the borough during report creation. <br>\n<br>\nThe only difference between this version and the parameterized report is replacing \"Manhattan\" with \"{{ borough }}\"\n\n```` markdown\n---\ntitle: \"Cool graphs about elevators\"\nauthor: Mike Mahoney\nsubtitle: \"Last generated on: 2022-10-25\"\ndate: today\nformat: \n  html: \n    echo: false\nparams: \n  borough: {{ borough }}\n---\n\n```{{r}}\n#| message: false\n#| results: false\nlibrary(elevators)\n\nif (!is.na(params$borough) && params$borough != \"NA\") {\n  elevators <- elevators[elevators$borough == params$borough, ]\n}\nif (nrow(elevators) == 0) {\n  stop(\"No elevators were selected. Did you misspell `borough`?\")\n}\n\nlibrary(ggplot2)\ntheme_set(theme_minimal())\n```\n\n## Speed over time\n\n```{{r}}\n#| message: false\n#| warning: false\nelevators |> \n  ggplot(aes(approval_date, speed_fpm)) + \n  geom_point(alpha = 0.05) + \n  geom_smooth() + \n  scale_y_log10()\n```\n\n## Speed versus capacity\n\n```{{r}}\n#| message: false\n#| warning: false\nelevators |> \n  ggplot(aes(capacity_lbs, speed_fpm)) + \n  geom_point(alpha = 0.05) + \n  geom_smooth() + \n  scale_y_log10()\n```\n\n## Where in the world did all my elevators go\n\n```{{r}}\nelevators |> \n  ggplot(aes(longitude, latitude)) + \n  geom_point(alpha = 0.05) + \n  coord_sf()\n```\n````\n\n\n\n## Creating a Function to Run + Render Many Reports\n\nWe now need another file that will replace \"{{ borough }}\" with the appropriate boroughs and render each report. \n\n```` markdown\n---\ntitle: \"Create All Borough Reports\"\nauthor: \"Michael Mullarkey\"\n---\n\n# Load Packages\n\n```{{r}}\n\nlibrary(whisker)    # For replacing {{ }} text\nlibrary(tidyverse)  # For function creation + data wrangling\nlibrary(glue)       # For programmatic file naming\nlibrary(lubridate)  # For today()\nlibrary(here)       # For better file paths\nlibrary(quarto)     # For rendering\nlibrary(elevators)  # For elevators data\n\n```\n\n# Use Whisker to Modify Template .qmd File with Desired Values\n\n```{{r}}\n\nuse_borough_template <- function(borough, file_name) {\n  \n  raw_qmd <- readLines(file_name) # Reading in full .qmd file\n  \n  filled_qmd <- whisker.render(raw_qmd) # Replace {{}} with borough value \n  \n  writeLines(\n    text = filled_qmd,\n    con = glue(\"{borough}_{today()}.qmd\") # Programmatic naming so we don't\n    # just overwrite the same file again and again when we iterate\n  )\n    \n}\n\n```\n\n# Render .qmd Files Using Programmatic Names\n\n```{{r}}\n\nrender_borough_template <- function(borough, file_name) {\n  \n  quarto_render(\n    input = glue(\"{borough}_{today()}.qmd\")\n  )\n  \n}\n\n```\n\n# Put Both Functions Together So We Only Have to Make One Function Call\n\n```{{r}}\n\ncreate_borough_report <- function(borough, file_name) {\n  \n  use_borough_template(borough = borough, file_name = file_name)\n  \n  render_borough_template(borough = borough, file_name = file_name)\n  \n}\n\n```\n\n# Testing the report creation once before going on to programmatic\n\n```{{r}}\n\n# Testing the report creation once before going on to programmatic\n\n# create_borough_report(borough = \"Manhattan\", file_name = \"borough_template.qmd\")\n\n```\n\n# Creating a dataframe of information to map over\n\n```{{r}}\n\n# Create data frame to map over for borough reports\n\nall_boroughs <- elevators::elevators %>% \n  distinct(borough) %>% \n  deframe()\n\nfile_name_vec <- rep(\"borough_template.qmd\", length(all_boroughs))\n\nboroughs_report_df <- tibble(all_boroughs, file_name_vec)\n\n```\n\n# Map over all borough reports\n\n```{{r}}\n\n# This also could be walk because we're really just looking for side effects!\n\n# Not necessary to do pmap for this example but it's more extensible to if you\n# need to use more than 2 paramters (otherwise can use map or map2)\n\npmap(\n  boroughs_report_df,\n  ~create_borough_report(\n    borough = ..1,\n    file_name = ..2\n  )\n)\n\n```\n````\n\n\n\nOnce you have a file like this that can programmatically replace your parameters and render reports you're good to go! You can check out the  <br>\n<br>\nIf stakeholders have a small tweak they want to one report but not others you can make that edit just in one .qmd file and then re-render it.^[I do more file path work using glue in other circumstances, and doing that wasn't playing nice with the Quarto blog structure. Another adventure for another time!]\n\n# Conclusion\n\nThis is one proof-of-concept for ultra-parameterized reports, and I've extended parameterized reports on the job in other ways. I've found working with databases + conditional evaluation of chunks particularly helpful for creating bespoke seeming reports in a programmatic way. Check out the programmatically generated reports for the [Bronx](https://mcmullarkey.github.io/mcmullarkey-blog/posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Bronx_2022-10-25.html), [Brooklyn](https://mcmullarkey.github.io/mcmullarkey-blog/posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Brooklyn_2022-10-25.html), and [Queens](https://mcmullarkey.github.io/mcmullarkey-blog/posts/2022_10_20_ultra_parameterized_reports/ultra_parameter_example/Queens_2022-10-25.html).^[Staten Island isn't playing nice due to the space in its name, but more customization work would fix that! Trying to get a minimum viable blog post out and iterate on these ideas in the future]<br>\n<br>\nIf you're curious about those approaches and haven't already opened [Mike Mahoney's blog post](https://www.mm218.dev/posts/2022-08-04-how-to-use-quarto-for-parameterized-reporting/){target=\"_blank\"} please do that now! He discusses those extensions among others, and everything you can do with a parameterized report can be done with an ultra-parameterized report. <br>\n<br>\nAlso, huge shout outs to [Jacqueline Nolis](https://twitter.com/skyetetra){target=\"_blank\"} and [Tom Mock](https://twitter.com/thomas_mock){target=\"_blank\"} who provided resources when I was first trying to improve report building at my job. If you have questions about this approach feel free to reach out to me on [Twitter!](https://twitter.com/mcmullarkey){target=\"_blank\"}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}